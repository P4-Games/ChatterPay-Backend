/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { ChatterPay, ChatterPayInterface } from '../ChatterPay';

const _abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: 'dest',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: 'func',
                type: 'bytes',
            },
        ],
        name: 'execute',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'entryPoint',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'owner',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'l1Storage',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'paymaster',
                type: 'address',
            },
        ],
        name: 'initialize',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const;

export class ChatterPay__factory {
    static readonly abi = _abi;
    static createInterface(): ChatterPayInterface {
        return new utils.Interface(_abi) as ChatterPayInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): ChatterPay {
        return new Contract(address, _abi, signerOrProvider) as ChatterPay;
    }
}
